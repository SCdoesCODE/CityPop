{"version":3,"sources":["ChooseScope.js","App.js","SearchCountry.js","SearchCity.js","index.js"],"names":["ChooseScope","state","showScopePage","hideScopePage","setState","this","className","to","onClick","Component","App","SearchCountry","cities","showLoading","country","countryInput","searchingForNewCountry","displayCities","oneCityChosen","chosenCityName","chosenCityPop","countryCodeError","handleSearch","makeApiCall","handleOnChange","event","target","value","handleOnKeyDown","key","handleOnKeyPressed","cityIndex","name","population","undoResults","input","urlCode","fetch","responseCode","json","dataCode","status","console","log","countryCode","alpha2Code","url","response","data","geonames","length","forEach","cityEntry","push","sort","a","b","countryName","divResults","icon","faHome","size","toUpperCase","type","placeholder","onKeyDown","onChange","faSearch","toLocaleString","replace","color","loading","SearchCity","beforeSearch","city","cityInput","displayCityPop","cityNotFound","nonValidInput","handleBack","props","history","goBack","test","ReactDOM","render","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.21c82ae1.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\";\nimport {Link } from \"react-router-dom\";\nimport './style.css'\n\n\n/*\n\nThe user chooses between two pages : search by country or search by city\n\n*/\n\nexport default class ChooseScope extends Component {\n\n\nstate = {\n        \n    showScopePage : true\n};\n\nhideScopePage = () =>{\n    this.setState({ showScopePage : false });\n}\n\n\nrender() {\n    return (\n        <>\n        {this.state.showScopePage ? \n            (<div className=\"center\">\n            \n        <div className = 'citypoptext'>CityPop</div>\n        <Link to ='./SearchCity' ><button className = 'button' onClick = {this.hideScopePage} >SEARCH BY CITY</button></Link>\n        <Link to ='./SearchCountry' ><button className = 'button' onClick = {this.hideScopePage} >SEARCH BY COUNTRY</button></Link>\n    </div>) : null}\n    </>\n       \n        \n    )\n}\n\n}","import React from 'react';\nimport ChooseScope from './ChooseScope';\nimport './style.css'\n\n\nfunction App() {\n  return (\n    <>\n    \n    <ChooseScope/>\n    </>\n  );\n}\n\nexport default App;\n\n","import React, { Component } from \"react\";\nimport './style.css'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch , faHome} from '@fortawesome/free-solid-svg-icons'\nimport { BallSpinFadeLoader } from 'react-pure-loaders';\nimport {Link } from \"react-router-dom\";\n\n/*\n\nhttps://reactjsexample.com/react-purecomponent-loading-animations/\nreact loader\n\ngot Module not found: Can't resolve '@emotion/core'\nfixed with : npm install react-spinners --save\n\nhttps://programmingwithmosh.com/react/font-awesome-5-with-react/\nfont awesome for react\n\nhttp://www.geonames.org/export/codes.html\nfeatureCode = PPLA for seat of a first-order administrative division\nfeatureCode = PPLC to include the capital\n\nUser inputs country and the program returns the top cities \n\nImprovements\n\nImplement some sort of protection for script injections\ne.g.\n\"/\",\"//\", \";\", '/**', inputs breaks the program because the user input is directly concatenated with the rest of the url\n\n\n*/\n\nexport default class SearchCountry extends Component {\n\n    \n    cities = []\n    \n    state = {\n        \n        showLoading: false,\n        country: '',\n        countryInput: '',\n        searchingForNewCountry : false,\n        displayCities : false,\n        oneCityChosen : false,\n        chosenCityName : '',\n        chosenCityPop : '', \n        countryCodeError : false\n    };\n    \n\n    /*Make API call upon user pressing search-button*/\n    handleSearch = () => {\n        this.makeApiCall(this.state.countryInput);\n        this.setState({ searchingForNewCountry :  true, showLoading : true});\n    };\n\n    /*update the user input*/ \n    handleOnChange = event => {\n    \n        this.setState({ countryInput: event.target.value });\n    };\n\n    handleOnKeyDown = event =>{\n        if(event.key === \"Enter\"){\n            this.handleSearch()\n        }\n\n    }\n\n    handleOnKeyPressed = cityIndex =>{\n        this.setState({ oneCityChosen: true , chosenCityName : this.cities[cityIndex].name, chosenCityPop : this.cities[cityIndex].population});\n        this.undoResults()\n    }\n\n    /*\n    Receives the input string from user, this input is likely the name of a country\n    Fetches countrycode for that country from restcountries API\n    Searches for all cities belonging to this countrycode using geonames API\n    */\n    async makeApiCall(input) {\n        \n        const urlCode = \"https://restcountries.eu/rest/v2/name/\" + input + \"?fullText=true\";\n        const responseCode = await fetch(urlCode);\n        const dataCode = await responseCode.json();\n        if(dataCode.status === 404){\n            this.setState({ countryCodeError : true, showLoading : false});\n        }\n        console.log(dataCode.status)\n        if(!this.state.countryCodeError){\n            let countryCode = dataCode[0].alpha2Code\n            const url = \"http://api.geonames.org/searchJSON?&country=\"+countryCode+\"&featureCode=PPLA&featureCode=PPLC&username=weknowit\";\n            const response = await fetch(url);\n            const data = await response.json();\n            console.log(data.geonames.length)\n            /*For each city : add its name and population to the cities array, as an object*/ \n            data.geonames.forEach(cityEntry => {\n                this.cities.push({population : cityEntry.population,name : cityEntry.name})\n                    }) \n            /*Sort the cities array according to the attribute : population*/\n            this.cities.sort(function(a, b) {\n                return (a.population > b.population) ? -1:+1;\n                });\n            /*Update country with the help of geonames in case user misspelled*/\n            this.setState({ country: data.geonames[0].countryName,showLoading: false, displayCities : true});\n\n        }\n        \n        \n    }\n\n    /*\n    Invoked after user has already searched for something\n    */\n\n    undoResults(){\n        this.divResults = []\n        this.cities = []\n    }\n\n    render() {\n\n\n        return (<div className=\"center\">\n            <Link to ='./ChooseScope' ><FontAwesomeIcon className = \"homebutton\"icon={faHome} size=\"2x\"/></Link>\n            <div className = 'citypoptext'>CityPop</div>\n            {this.state.searchingForNewCountry ? null : <h1>SEARCH BY COUNTRY</h1>}\n            {this.state.countryCodeError ? <h1>Could not find \"{this.state.countryInput}\"</h1> : null}\n            {this.state.oneCityChosen ? null : <h1>{this.state.country.toUpperCase()}</h1>}\n            {!this.state.displayCities & !this.state.countryCodeError ? <div>\n                <input className = \"searchbox\" name=\"text\" type=\"text\" placeholder=\"Enter a country\" onKeyDown = {event => this.handleOnKeyDown(event)} onChange={event => this.handleOnChange(event)} value={this.state.countryInput} />\n            <div><FontAwesomeIcon className = \"searchbutton\"  onClick={this.handleSearch} icon={faSearch} size=\"2x\"/></div>\n            </div> : this.state.oneCityChosen &!this.state.countryCodeError ? <div><h1>{this.state.chosenCityName.toUpperCase()}</h1><div className = \"resultcontainer\"><div className = \"chosencitybox\"><span className = \"newline\">POPULATION</span><h1>{this.state.chosenCityPop.toLocaleString().replace(/,/g,\" \",)}</h1></div></div></div> \n            : this.state.countryCodeError ? null : \n            (<div>\n                <br/>\n               \n                <div className = \"resultcontainer\">\n                <br/>\n                <div onClick = {() => {this.handleOnKeyPressed(0)}}  className = \"resultbox\">{this.cities[0].name}</div>\n                <div onClick = {() => {this.handleOnKeyPressed(1)}} className = \"resultbox\">{this.cities[1].name}</div>\n                <div onClick = {() => {this.handleOnKeyPressed(2)}} className = \"resultbox\">{this.cities[2].name}</div>\n                </div>\n            </div>)\n            }\n            {/*loader activated when this.state.showLoading is true*/}\n            <div  className = \"loadingspinner\"> <BallSpinFadeLoader  color={'#000000'} loading={this.state.showLoading}/></div> \n            \n        </div>);\n    }\n}","import React, { Component } from \"react\";\nimport './style.css'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch ,faHome} from '@fortawesome/free-solid-svg-icons'\nimport { BallSpinFadeLoader } from 'react-pure-loaders';\nimport {Link } from \"react-router-dom\";\n\n/*\n\nThe user inputs a city\nThe program displays the population of that city\n\nPossible improvements :\nRight now it's possible to get the population of a country, \nhaven't found a way to only search for city on geonames without downloading\n\n*/\n\nexport default class SearchCity extends Component {\n    state = {\n        beforeSearch : true,\n        showLoading: false,\n        city: '',\n        cityInput: '',\n        displayCityPop : false,\n        cityNotFound : false, \n        nonValidInput : false\n    };\n\n    \n\n    handleBack = () => {\n        this.props.history.goBack()\n      }\n    \n    handleOnChange = event => {\n        this.setState({ cityInput: event.target.value });\n    };\n\n    handleOnKeyDown = event =>{\n        if(event.key === \"Enter\"){\n            this.handleSearch()\n        }\n\n    }\n\n    handleSearch = () => {\n        this.setState({ showLoading: true , beforeSearch : false});\n        this.makeApiCall(this.state.cityInput);\n    };\n    async makeApiCall(input) {\n        if(/\\d+/g.test(input)|| /[!@#$%^&*(),.?\":{}|<>]/g.test(input)){\n            this.setState({ nonValidInput : true, showLoading : false });\n        }else{\n            let city = input\n            const url = \"http://api.geonames.org/searchJSON?name_equals=\"+ city +\"&maxRows=1&username=weknowit\";\n            const response = await fetch(url);\n            const data = await response.json();\n\n            if(data.geonames.length === 0 ){\n                this.setState({ cityNotFound : true });\n            }\n            \n            this.setState({ city: data.geonames[0] });\n            this.setState({ showLoading: false , displayCityPop : true});\n\n        }\n        \n    }\n    render() {\n        return (\n            \n        \n        <div className=\"center\">\n            <Link to ='./ChooseScope' ><FontAwesomeIcon className = \"homebutton\" icon={faHome} size=\"2x\" /></Link>\n            <div className = 'citypoptext'>CityPop</div>\n            {this.state.displayCityPop | this.state.nonValidInput? null : \n            <div><h1>SEARCH BY CITY</h1>\n            <input className = \"searchbox\" name=\"text\" type=\"text\" placeholder=\"Enter a city\" onKeyDown = {event => this.handleOnKeyDown(event)} onChange={event => this.handleOnChange(event)} value={this.state.cityInput} />\n            <div><FontAwesomeIcon className = \"searchbutton\"  onClick={this.handleSearch} icon={faSearch} size=\"2x\"/></div></div>}\n            \n            \n            {this.state.displayCityPop & !this.state.cityNotFound ? \n            <div>\n                <h1>{this.state.city.name}</h1>\n                <div className = \"chosencitybox\"><span className = \"newline\">POPULATION</span><h1>{this.state.city.population.toLocaleString().replace(/,/g,\" \",)}</h1></div>\n            </div> : null}\n            {this.state.nonValidInput ? <h1>Please input a valid city name</h1> : null}\n            {this.state.cityNotFound ? <h1>Could not find \"{this.state.cityInput}\"</h1> : null}\n            \n            {/*loader activated when this.state.showLoading is true*/}\n            <div  className = \"loadingspinner\"> <BallSpinFadeLoader  color={'#000000'} loading={this.state.showLoading}/></div> \n        </div>);\n        \n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ChooseScope from './ChooseScope'\nimport SearchCountry from './SearchCountry'\nimport SearchCity from './SearchCity'\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n        \n        <App />\n       <Switch>\n       <Route path=\"/ChooseScope\" component={ChooseScope} />\n        <Route path=\"/SearchCountry\" component={SearchCountry} />\n         <Route path=\"/SearchCity\" component={SearchCity} />\n      </Switch>\n      </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}